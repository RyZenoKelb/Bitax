// prisma/schema.prisma

// Configuration améliorée pour la production
generator client {
  provider = "prisma-client-js"
}

// Configuration de la base de données selon l'environnement
datasource db {
  provider = "postgresql" // Changé de sqlite à postgresql pour la production
  url      = env("DATABASE_URL")
}

// Le reste du schéma reste inchangé...
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
  reports       Report[]
  isPremium     Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet {
  id        String   @id @default(cuid())
  address   String
  network   String   @default("eth")
  name      String?
  isPrimary Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([address, userId])
}

model Report {
  id        String   @id @default(cuid())
  name      String
  fileUrl   String?
  type      String   @default("tax")
  year      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}